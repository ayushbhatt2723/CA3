// Round Robin question

#include<iostream.h>
#include<stdio.h>
#include<conio.h>

using namespace std;

void findavgTime(int n,int processes[],int bt[],int quantum)
{
    int wt[n],tat[n];
    float total_wt = 0,total_tat = 0,n;
 
    findWaitingTime(processes,n,bt,wt,time_quantum);

    findTurnAroundTime(processes,n,bt,wt,tat);
 
    cout<<"Processes"<<"Burst time"<<"Waiting time"<<"Turn around time";
 
    for (int i=0;i<n;i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        cout<<"\n"<< i+1<<"\n\t"<<bt[i]<<"\n"<<wt[i]<<"\n"<<tat[i]<<endl;
    } 
    cout <<"\n Avg waiting time="<<total_wt/n;
    cout <<"\n Avg turn around time ="<<total_tat/n;
}

void WaitingTime(int processes[], int n,int bt[], int wt[], int time_quantum)
{
    int rem[n];
    for (int i=0;i<n;i++)
        rem[i]=bt[i];

    int t=0; 
    while(1)
    {
        bool wait = true;

          for (int i=0;i<n;i++)
        {
            if (rem[i]>0)
            {
                wait = false;
 
                if (rem[i]> time_quantum)
                {
                    t += time_quantum;
                    rem[i]= time_quantum;
                }
                else
                {
                    t=t+rem[i];
                    wt[i]=t-bt[i];
                    rem[i]= 0;
                }
            }
        }
        if (wait==true)
          break;
    }
}
 
// Function to calculate turn around time

void findTurnAroundTime(int processes[], int n,int bt[], int wt[], int tat[])
{ ss
    for (int i=0;i<n;i++)
        tat[i]=bt[i]+wt[i];
}
 
int main()
{
    int processes[] = {4,5,6};
    int n = sizeof processes / sizeof processes[0];
    int burst_time[] = {23,1,2};
 
    int quantum = 10;
    findavgTime(processes, n, burst_time, time_quantum);
    return 0;
}
